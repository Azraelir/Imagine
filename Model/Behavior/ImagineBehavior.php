<?php
/**
 * Copyright 2011-2012, Cake Development Corporation (http://cakedc.com)
 *
 * Licensed under The MIT License
 * Redistributions of files must retain the above copyright notice.
 *
 * Copyright 2011-2012, Cake Development Corporation (http://cakedc.com)
 * @license MIT License (http://www.opensource.org/licenses/mit-license.php)
 */

App::uses('ImagineUtility', 'Imagine.Lib');

/**
 * CakePHP Imagine Plugin
 *
 * @package Imagine.Model.Behavior
 */
class ImagineBehavior extends ModelBehavior {

/**
 * Settings array
 *
 * @var array
 */
	public $settings = array();

/**
 * Default settings array
 *
 * @var array
 */
	protected $_defaults = array(
		'engine' => 'Gd');

/**
 * Setup
 *
 * @param AppModel $Model
 * @param array $settings
 * @return void
 */
	public function setup(Model $Model, $settings = array()) {
		$this->settings = array_merge($this->_defaults, $settings);
		$class = 'Imagine\\' . $this->settings['engine'] . '\Imagine';
		$this->Imagine = new $class();
	}

/**
 * Get the imagine object
 *
 * @return Imagine object
 */
	public function imagineObject(Model $Model) {
		return $this->Imagine;
	}

/**
 * Loads an image and applies operations on it
 *
 * Caching and taking care of the file storage is NOT the purpose of this method!
 *
 * @param Model $Model
 * @param string $image source image path
 * @param mixed 
 * @param array Imagine image objects save() 2nd parameter options
 * @return boolean
 */
	public function processImage(Model $Model, $image, $output = null, $imagineOptions = array(), $operations = array()) {
		$ImageObject = $this->Imagine->open($image);
		foreach ($operations as $operation  => $params) {
			if (method_exists($Model, $operation)) {
				$Model->{$operation}(&$ImageObject, $params);
			} elseif (method_exists($this, $operation)) {
				$this->{$operation}($Model, &$ImageObject, $params);
			} else {
				return false;
			}
		}

		if (is_null($output)) {
			return $ImageObject;
		}

		return $ImageObject->save($output, $imagineOptions);
	}

/**
 * Turns the operations and their params into a string that can be used in a file name to cache an image.
 *
 * Suffix your image with the string generated by this method to be able to batch delete a file that has versions of it cached.
 * The intended usage of this is to store the files as my_horse.thumbnail+width-100-height+100.jpg for example.
 *
 * So after upload store your image meta data in a db, give the filename the id of the record and suffix it
 * with this string and store the string also in the db. In the views, if no further control over the image access is needd,
 * you can simply direct linke the image like $this->Html->image('/images/05/04/61/my_horse.thumbnail+width-100-height+100.jpg');
 *
 * @param array $operations Imagine image operations
 * @param array $separators Optional
 * @return string Filename compatible String representation of the operations
 * @link http://support.microsoft.com/kb/177506
 */
	public function operationsToString(Model $Model, $operations, $separators = array(), $hash = false) {
		return \Imagine\ImagineUtility::operationsToString($operations, $separators, $hash);
	}

	public function hashImageOperations($imageSizes, $hashLenght = 8) {
		return \Imagine\ImagineUtility::hashImageOperations($imageSizes, $hashLenght = 8);
	}

/**
 * Wrapper for Imagines crop
 *
 * @param object Model
 * @param object Imagine Image Object
 * @param array Array of options for processing the image
 */
	public function crop(Model $Model, $Image, $options = array()) {
		$defaults = array('cropX' => 0, 'cropY' => 0);
		$options = array_merge($defaults, $options);

		if (empty($options['height']) || empty($options['width'])) {
			throw new InvalidArgumentException(__d('Imagine', 'You have to pass height and width in the options!'));
		}

		$Image->resize(new Imagine\Image\Box($options['width'], $options['height']))
			->crop(new Imagine\Image\Point($options['cropX'], $options['cropY']), new Imagine\Image\Box($options['width'], $options['height']));
	}

/**
 * Wrapper for rotate
 *
 * @param object Model
 * @param object Imagine Image Object
 */
	public function rotate(Model $Model, $Image, $options = array()) {
		if (empty($options['degree']))
		$Image->rotate($options['degree']);
	}

/**
 * Wrapper for Imagines thumbnail
 *
 * @param object Model
 * @param object Imagine Image Object
 * @param array Array of options for processing the image
 */
	public function thumbnail(Model $Model, $Image, $options = array()) {
		if (empty($options['height']) || empty($options['width'])) {
			throw new InvalidArgumentException(__d('Imagine', 'You have to pass height and width in the options!'));
		}

		$mode = Imagine\Image\ImageInterface::THUMBNAIL_INSET;
		if (isset($options['mode']) && $options['mode'] == 'outbound') {
			$mode = Imagine\Image\ImageInterface::THUMBNAIL_OUTBOUND;
		}
		$Image = $Image->thumbnail(new Imagine\Image\Box($options['width'], $options['height']), $mode);
	}

/**
 * Wrapper for Imagines resize
 *
 * @param object Model
 * @param object Imagine Image Object
 * @param array Array of options for processing the image
 */
	public function resize(Model $Model, $Image, $options = array()) {
		if (empty($options['height']) || empty($options['width'])) {
			throw new InvalidArgumentException(__d('Imagine', 'You have to pass height and width in the options!'));
		}

		$Image->resize(new Imagine\Image\Box($options['width'], $options['height']));
	}

/**
 * Gets the size of an image
 *
 * @param Model $Model
 * @param mixed Imagine Image object or string of a file name
 * @return array first value is width, second height
 * @see Imagine\Image\ImageInterface::getSize()
 */
	public function getImageSize(Model $Model, $Image) {
		if (is_string($Image)) {
			$class = 'Imagine\\' . $this->settings['engine'] . '\Imagine';
			$Imagine = new $class();
			$Image = $Imagine->open($Image);
		}
		$BoxInterface = $Image->getSize($Image);
		return array(
			$BoxInterface->getWidth(),
			$BoxInterface->getHeight());
	}

}