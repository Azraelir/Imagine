<?php
/**
 * Copyright 2011, Cake Development Corporation (http://cakedc.com)
 *
 * Licensed under The MIT License
 * Redistributions of files must retain the above copyright notice.
 *
 * @copyright Copyright 2011, Cake Development Corporation (http://cakedc.com)
 * @license MIT License (http://www.opensource.org/licenses/mit-license.php)
 */

App::import('Lib', 'Imagine.ImagineLoader');

/**
 * CakePHP Imagine Plugin
 *
 * @package Imagine.Model.Behavior
 */
class ImagineBehavior extends ModelBehavior {

/**
 * Settings array
 *
 * @var array
 */
	public $settings = array();

/**
 * Default settings array
 *
 * @var array
 */
	protected $_defaults = array(
		'engine' => 'Gd');

/**
 * Setup
 *
 * @param AppModel $Model
 * @param array $settings
 * @return void
 */
	public function setup(Model $Model, $settings = array()) {
		$this->settings = array_merge($this->_defaults, $settings);
		$class = 'Imagine\\' . $this->settings['engine'] . '\Imagine';
		$this->Imagine = new $class();
	}

/**
 * Get the imagine object
 *
 * @return Imagine object
 */
	public function imagineObject(Model $Model) {
		return $this->Imagine;
	}

/**
 * Loads an image and applies operations on it
 *
 * Caching and taking care of the file storage is NOT the purpose of this method!
 *
 * @param Model $Model
 * @param string $image source image path
 * @param mixed 
 * @param array Imagine image objects save() 2nd parameter options
 * @return boolean
 */
	public function processImage(Model $Model, $image, $output = null, $imagineOptions = array(), $operations = array()) {
		$ImageObject = $this->Imagine->open($image);
		foreach ($operations as $operation  => $params) {
			if (method_exists($Model, $operation)) {
				$Model->{$operation}(&$ImageObject, $params);
			} elseif (method_exists($this, $operation)) {
				$this->{$operation}($Model, &$ImageObject, $params);
			} else {
				return false;
			}
		}

		if (is_null($output)) {
			return $ImageObject;
		}

		return $ImageObject->save($output, $imagineOptions);
	}

/**
 * Turns the operations and their params into a string that can be used in a file name to cache an image.
 *
 * Suffix your image with the string generated by this method to be able to batch delete a file that has versions of it cached.
 * The intended usage of this is to store the files as my_horse.thumbnail+width-100-height+100.jpg for example.
 *
 * So after upload store your image meta data in a db, give the filename the id of the record and suffix it
 * with this string and store the string also in the db. In the views, if no further control over the image access is needd,
 * you can simply direct linke the image like $this->Html->image('/images/05/04/61/my_horse.thumbnail+width-100-height+100.jpg');
 *
 * @param array $operations Imagine image operations
 * @param array $separators Optional
 * @return string Filename compatible String representation of the operations
 * @link http://support.microsoft.com/kb/177506
 */
	public function paramsAsFilestring(Model $Model, $operations, $separators = array(), $hash = false) {
		ksort($operations);

		$defaultSeparators = array(
			'operations' => '.',
			'params' => '+',
			'value' => '-');
		$separators = array_merge($defaultSeparators, $separators);

		$result = '';
		foreach ($operations as $operation => $data) {
			$tmp = array();
			foreach ($data as $key => $value) {
				if (is_string($value) || is_numeric($value)) {
					$tmp[] = $key . $separators['value'] . $value;
				}
			}
			$result = $separators['operations'] . $operation . $separators['params'] . join($separators['params'], $tmp);
		}

		if ($hash && $result != '') {
			if (function_exists($hash)) {
				return $hash($result);
			} elseif (method_exists($Model, $hash)) {
				return $Model->{$hash}($result);
			}
			throw new BadFunctionCallException();
		}

		return $result;
	}

/**
 * Wrapper for Imagines crop
 *
 * @param object Model
 * @param object Imagine Image Object
 * @param array Array of options for processing the image
 */
	public function crop(Model $Model, $Image, $options = array()) {
		$Image->resize(new Imagine\Image\Box($options['width'], $options['height']))
			->crop(new Imagine\Image\Point(0, 0), new Imagine\Image\Box($options['width'], $options['height']));
	}

/**
 * Wrapper for Imagines thumbnail
 *
 * @param object Model
 * @param object Imagine Image Object
 * @param array Array of options for processing the image
 */
	public function thumbnail(Model $Model, $Image, $options = array()) {
		$Image = $Image->thumbnail(new Imagine\Image\Box($options['width'], $options['height']));
	}

/**
 * Wrapper for Imagines resize
 *
 * @param object Model
 * @param object Imagine Image Object
 * @param array Array of options for processing the image
 */
	public function resize(Model $Model, $Image, $options = array()) {
		$Image->resize(new Imagine\Image\Box($options['width'], $options['height']));
	}

}